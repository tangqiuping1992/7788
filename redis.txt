redis
key-value数据库，value可以是字符串(String), 哈希(Map), 列表(list), 集合(sets) 和 有序集合(sorted sets)等类型。
特点：
1、redis支持数据持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用
2、redis不仅支持简单的key-value类型的数据，同时还提供list、set、zset、hash等数据结构的存储
3、redis支持数据的备份，即master-slave模式的数据备份
优势：
1、性能极高
2、丰富的数据类型
3、redis的所有操作都是原子性的，要么成功执行要么失败完全不执行
4、丰富的特性，redis还支持 publish/subscribe, 通知, key 过期等等特性。
安装
windows下安装Redis第一次启动报错：
[2368] 21 Apr 02:57:05.611 # Creating Server TCP listening socket 127.0.0.1:6379: bind: No error
解决方法：在命令行中运行
redis-cli.exe
127.0.0.1:6379>shutdown
not connected>exit
然后重新运行redis-server.exe redis.windows.conf，启动成功！
进入到路径
redis-cli -h host -p port -a password
redis-cli.exe -h 127.0.0.1 -p 6379
set mykey abc
get mykey

数据类型
1、string：是redis最基本的数据类型，一个键最大能存储512MB
SET name "some"
GET name
DEL name :  如果键被删除成功，命令执行后输出 (integer) 1，否则将输出 (integer) 0
2、hash： hash 是一个键值(key=>value)对集合。
HMSET myhash field1 "Hello" field2 "World"
HGET myhash field1
HGET myhash field2
3、list：Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）。
lpush key value
lrange key 0 10
列表最多可存储 232 - 1 元素 (4294967295, 每个列表可存储40多亿)。
4、set：Set是string类型的无序集合。（元素唯一）
sadd runoob redis
smembers runoob
5、zset：有序集合（元素唯一）
zadd key score member 
zadd runoob 0 redis
zadd runoob 0 mongodb
zadd runoob 0 rabitmq
zadd runoob 0 rabitmq
ZRANGEBYSCORE runoob 0 1000


redis 键（key）
del key: 被删除 key 的数量
dump key: 如果 key 不存在，那么返回 nil 。 否则，返回序列化之后的值。
exists key: 若 key 存在返回 1 ，否则返回 0 
Expire key: 设置 key 的过期时间, s为单位
EXPIREAT key 1293840000：以 UNIX 时间戳(unix timestamp)格式设置 key 的过期时间
PEXPIRE key：以毫秒为单位设置 key 的生存时间
......

Redis 字符串(String)
set key value
get key
getrange key start end 
getset key value: 设置指定 key 的值，并返回 key 的旧值;key 不存在时，返回 nil 
mset key1 value1 … keyN valueN 一次设置多个key的值 
mget key1 key2 … keyN 一次获取多个key的值 
int:
incr key 对key的值做加加操作，并返回新的值
incrby key integer 同incr，加指定值 
decr key 同上，但做的是减减操作 
decrby key integer 同decr，减指定值 
str:
append key value 给指定key的字符串追加value 
substr key start end 返回截取过的key的字符串值 


Redis 哈希(Hash)
hset myhash field1 "foo" 
hdel myhash field1
hkeys key : 获取所有哈希表的字段
hlen key

Redis 列表(List)
lpush mylist "a":将一个或多个值插入到列表头部
lrange mylist 0 100
blpop mylist 0:移出并获取列表的第一个元素
brpop mylist 100:移出并获取列表的最后一个元素
lindex mylist 0/1/-1
llen mylist
lpop mylist: 移出并获取列表的第一个元素
lpushx key value:将一个值插入到已存在的列表头部
ltrim key start: 截取list，保留指定区间内元素

Redis set(string类型的无序集合)
sadd key number   添加一个string元素到key对应的set集合中，成功返回1
srem key member [member]  从key对应set中移出给定元素，成功返回1
smove p1 p2 member        从p1对应set中移除member并添加p2对应set中
scard key                 返回set的元素个数
sismember key member      判断member是否在set中
sinter key1 key2...keyN   返回所有给定key的交集 
sunion key1 key2...keyN   返回所有给定key的并集 
sdiff key1 key2...keyN    返回所有给定key的差集 
smembers key              返回key对应set的所有元素，结果是无序的

Redis 有序集合(sorted set)
ZADD myzset 1 "one
ZADD myzset 1 "uno"
ZADD myzset 2 "two" 3 "three"
ZRANGE myzset 0 -1 WITHSCORES
zcard myset: 计算集合中元素的数量

Redis 事务
MULTI：开始事务
EXEC：执行所有事务块内的命令
DISCARD：取消事务，放弃执行事务块内的所有命令
WATCH key [key ...] 
UNWATCH：取消 WATCH 命令对所有 key 的监视。

Redis 服务器
INFO：获取 redis 服务器的统计信息
COMMAND ：获取 Redis 命令详情数组
......

redis一共有15个数据库，超过就选取不了了
select 16 会报错
move test 1: 将key为test的key 移动到数据库1中
flushdb: 删除当前数据库的所有key
flushall: 删除所有数据库的所有key




Memcached 
Memcached是一种基于内存的key-value存储，用来存储小块的任意数据（字符串、对象）。这些数据可以是数据库调用、API调用或者是页面渲染的结果。
memcached.exe -d install
memcached.exe -d uninstall
memcached.exe -d start
memcached.exe -d stop
连接：
telnet 127.0.0.1 11211

存储命令：
1、set命令：set的key已经存在，该命令可以更新该key所对应的原来的数据，也就是实现更新的作用
set key flags exptime bytes [noreply] value 
get key
set runoob 0 900 9 memcached
STORED: 保存成功后输出。
ERROR：在保持失败后输出。
注：
key：键值 key-value 结构中的 key，用于查找缓存值。
flags：可以包括键值对的整型参数，客户机使用它存储关于键值对的额外信息 。
exptime：在缓存中保存键值对的时间长度（以秒为单位，0 表示永远）
bytes：在缓存中存储的字节数
noreply（可选）： 该参数告知服务器不需要返回数据
value：存储的值（始终位于第二行）（可直接理解为key-value结构中的value）

2、add命令：如果 add 的 key 已经存在，则不会更新数据(过期的 key 会更新)，之前的值将仍然保持相同，并且您将获得响应 NOT_STORED。
add key flags exptime bytes [noreply] value

3、replace 命令：用于替换已存在的 key(键) 的 value(数据值)。如果 key 不存在，则替换失败，并且您将获得响应 NOT_STORED。
replace key flags exptime bytes [noreply] value

4、append 命令：向已存在 key(键) 的 value(数据值) 后面追加数据 。
append key flags exptime bytes [noreply] value

5、CAS 命令：执行一个"检查并设置"的操作
它仅在当前客户端最后一次取值后，该key 对应的值没有被其他客户端修改的情况下， 才能够将值写入。
检查是通过cas_token参数进行的， 这个参数是Memcach指定给已经存在的元素的一个唯一的64位值。
cas key flags exptime bytes unique_cas_token [noreply] value

查找命令
1、 get 命令：获取存储在 key(键) 中的 value(数据值) ，如果 key 不存在，则返回空
get key
get key1 key2 key3

2、gets 命令：获取带有 CAS 令牌存 的 value(数据值) ，如果 key 不存在，则返回空
gets key
gets key1 key2 key3

3、delete 命令：删除已存在的 key(键)。
delete key [noreply]
DELETED：删除成功。
ERROR：语法错误或删除失败。
NOT_FOUND：key 不存在。

4、incr 与 decr 命令：对已存在的 key(键) 的数字值进行自增或自减操作。
操作的数据必须是十进制的32位无符号整数。
如果 key 不存在返回 NOT_FOUND，如果键的值不为数字，则返回 CLIENT_ERROR，其他错误返回 ERROR。
incr key increment_value
decr key decrement_value

统计命令
1、stats：于返回统计信息例如 PID(进程号)、版本号、连接数等
pid：	memcache服务器进程ID
uptime：服务器已运行秒数
time：服务器当前Unix时间戳
version：memcache版本
pointer_size：操作系统指针大小
rusage_user：进程累计用户时间
rusage_system：进程累计系统时间
curr_connections：当前连接数量
total_connections：Memcached运行以来连接总数
connection_structures：Memcached分配的连接结构数量
cmd_get：get命令请求次数
cmd_set：set命令请求次数
cmd_flush：flush命令请求次数
get_hits：get命令命中次数
get_misses：get命令未命中次数
delete_misses：delete命令未命中次数
delete_hits：delete命令命中次数
incr_misses：incr命令未命中次数
incr_hits：incr命令命中次数
decr_misses：decr命令未命中次数
decr_hits：decr命令命中次数
cas_misses：cas命令未命中次数
cas_hits：cas命令命中次数
cas_badval：使用擦拭次数
auth_cmds：认证命令处理的次数
auth_errors：认证失败数目
bytes_read：读取总字节数
bytes_written：发送总字节数
limit_maxbytes：分配的内存总大小（字节）
accepting_conns：服务器是否达到过最大连接（0/1）
listen_disabled_num：失效的监听数
threads：当前线程数
conn_yields：连接操作主动放弃数目
bytes：当前存储占用的字节数
curr_items：当前存储的数据总数
total_items：启动以来存储的数据总数
evictions：LRU释放的对象数目
reclaimed：已过期的数据条目来存储新数据的数目

2、stats items 命令：显示各个 slab 中 item 的数目和存储时长(最后一次访问距离现在的秒数)

3、stats slabs 命令：显示各个slab的信息，包括chunk的大小、数目、使用情况等。

4、stats sizes 命令：显示所有item的大小和个数。该信息返回两列，第一列是 item 的大小，第二列是 item 的个数。

5、flush_all 命令：清理缓存中的所有 key=>value(键=>值) 对
flush_all [time] [noreply]

PHP 连接 Memcached
$memcache = new Memcache;             //创建一个memcache对象
$memcache->connect('localhost', 11211) or die ("Could not connect"); //连接Memcached服务器
$memcache->set('key', 'test');        //设置一个变量到内存中，名称是key 值是test
$get_value = $memcache->get('key');   //从内存中取出key的值
echo $get_value;